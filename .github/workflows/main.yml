name: Laravel Tests and Build image

on:
  push:
    branches: [ "main" ]

jobs:
  tests:

    runs-on: ubuntu-latest

    steps:
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, rdkafka
        coverage: none
    - uses: actions/checkout@v3
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        APP_ENV: testing
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test
    - name: Run Code Analysis
      run: ./vendor/bin/phpstan analyse app --error-format=github
  build-and-upload-docker-image:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: docker build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/micro-service-deliveries-php:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Docker Push
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/micro-service-deliveries-php:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-upload-docker-image
    steps:
      - name: Deploy to Coinhost
        uses: appleboy/ssh-action@master
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/micro-service-deliveries-php:latest
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          envs: DOCKER_IMAGE
          script: |
            echo "Download new version"
            docker pull $DOCKER_IMAGE
            echo "Stop current version"
            sleep 1
            API=$(docker ps -q -f name=micro-service-deliveries-php)
            if [! -z $API]
            then
              docker stop $API
              docker rm $API
            fi
              docker run -d --name micro-service-deliveries-php -p 80:8080 $DOCKER_IMAGE
      - name: Test Deployment
        env:
          ENDPOINT: ${{ secrets.ENDPOINT }}
        run: |
          docker exec -it micro-service-deliveries-php php artisan test
      - name: Check Service on coinhost
        env:
          ENDPOINT: ${{ secrets.ENDPOINT }}
        run: |
          RESPONSE=$(curl -o /dev/null -s -w "%{http_code}\n" ${$ENDPOINT})
          if [${RESPONSE} -ne "200"]
          then
            echo "Service unresponsive"
            exit 1
          fi
            echo "Success!"
